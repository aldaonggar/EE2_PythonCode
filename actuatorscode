#!/usr/bin/python
import math

import spidev
import time
import mysql.connector
from datetime import datetime

from RPi import GPIO
from gpiozero import Buzzer
from gpiozero import Motor
from time import sleep
import os

# Open SPI bus
spi = spidev.SpiDev()
spi.open(0, 0)
spi.max_speed_hz = 1000000

# Function to read SPI data from MCP3008 chip
# Channel must be an integer 0-7
def ReadChannel(channel):
    adc = spi.xfer2([1, (8+channel)<<4, 0])
    data = ((adc[1] & 3) << 8) + adc[2]
    return data

# Function to convert data to voltage level,
# rounded to specified number of decimal places.
def ConvertVolts(data, places):
    volts = (data * 3.3) / float(1023)
    volts = round(volts, places)
    return volts

# Function to calculate temperature from
# TMP36 data, rounded to specified
# number of decimal places.
def ConvertTemp(volts, places):

    celsius = ((185.944206 * volts - 348.05793)/(volts - 3.3))
    celsius = round(celsius, places)
    return celsius

def DBconnection ():
    return mysql.connector.connect(
        host="mysql.studev.groept.be",
        user="a21ib2c06",
        password="secret",
        database="a21ib2c06"
    )

def Manualcontrol():
    mydb = DBconnection()

    mycursor = mydb.cursor()

    sql = "select * from RPI_Control order by ID DESC LIMIT 1"
    mycursor.execute(sql)
    command = mycursor.fetchall()
    return command

def lastIdFromDB():
    mydb = DBconnection()

    mycursor = mydb.cursor()

    sql = "select TimeInt from RPI_Data order by TimeInt DESC LIMIT 1"
    mycursor.execute(sql)
    lastid = mycursor.fetchall()
    return int(lastid[0][0])

def valuestoDB(cnt, lux, celsius, dB):
    mydb = DBconnection()

    mycursor = mydb.cursor()

    sql = "INSERT INTO RPI_Data (TimeInt, DateTime, Temperature, Brightness, Noise) VALUES (%s, %s, %s, %s, %s)"
    val = (cnt, datetime.now(), celsius, lux, dB)
    mycursor.execute(sql, val)

    mydb.commit()

def MotorActivation():
    motor = Motor(forward = 4, backward = 14)
    motor.forward()
    sleep(5)
    motor.backward()
    sleep(5)
    motor.stop()
    return

def BuzzerActivation():
    BuzzerPin = 26

    GPIO.setmode(GPIO.BCM)
    GPIO.setup(BuzzerPin, GPIO.OUT)
    GPIO.setwarnings(False)

    global Buzz
    Buzz = GPIO.PWM(BuzzerPin, 440)
    Buzz.start(50)

    B0=31
    C1=33
    CS1=35
    D1=37
    DS1=39
    E1=41
    F1=44
    FS1=46
    G1=49
    GS1=52
    A1=55
    AS1=58
    B1=62
    C2=65
    CS2=69
    D2=73
    DS2=78
    E2=82
    F2=87
    FS2=93
    G2=98
    GS2=104
    A2=110
    AS2=117
    B2=123
    C3=131
    CS3=139
    D3=147
    DS3=156
    E3=165
    F3=175
    FS3=185
    G3=196
    GS3=208
    A3=220
    AS3=233
    B3=247
    C4=262
    CS4=277
    D4=294
    DS4=311
    E4=330
    F4=349
    FS4=370
    G4=392
    GS4=415
    A4=440
    AS4=466
    B4=494
    C5=523
    CS5=554
    D5=587
    DS5=622
    E5=659
    F5=698
    FS5=740
    G5=784
    GS5=831
    A5=880
    AS5=932
    B5=988
    C6=1047
    CS6=1109
    D6=1175
    DS6=1245
    E6=1319
    F6=1397
    FS6=1480
    G6=1568
    GS6=1661
    A6=1760
    AS6=1865
    B6=1976
    C7=2093
    CS7=2217
    D7=2349
    DS7=2489
    E7=2637
    F7=2794
    FS7=2960
    G7=3136
    GS7=3322
    A7=3520
    AS7=3729
    B7=3951
    C8=4186
    CS8=4435
    D8=4699
    DS8=4978

    song = [
        G4,
        E4, F4, G4, G4, G4,
        A4, B4, C5, C5, C5,
        E4, F4, G4, G4, G4,
        A4, G4, F4, F4,
        E4, G4, C4, E4,
        D4, F4, B3,
        C4
    ]

    beat = [
        8,
        8, 8, 4, 4, 4,
        8, 8, 4, 4, 4,
        8, 8, 4, 4, 4,
        8, 8, 4, 2,
        4, 4, 4, 4,
        4, 2, 4,
        1
    ]

    for i in range(1, len(song)):
        Buzz.ChangeFrequency(song[i])
        time.sleep(beat[i]*0.13)
    Buzz.stop()
    return


# Define sensor channels
light_channel = 3
temp_channel = 1
mic_channel = 0

# Define delay between readings
delay = 2
cnt = lastIdFromDB()
lastInstructionID = []
while True:

    #Reading instruction from RPI_Control and activate particular actuators if desired by the user
    instructions = Manualcontrol()
    if(len(lastInstructionID) == 0):
        if (int(instructions[0][1]) == 1):
            BuzzerActivation()
        if (int(instructions[0][2]) == 1):
            MotorActivation()
        lastInstructionID.append(int(instructions[0][0]))
    elif (int(instructions[0][0]) != lastInstructionID[-1]):
        if (int(instructions[0][1]) == 1):
            BuzzerActivation()
        if (int(instructions[0][2]) == 1):
            MotorActivation()
        lastInstructionID.append(int(instructions[0][0]))

    # Read the light sensor data
    light_level = ReadChannel(light_channel)
    light_volts = ConvertVolts(light_level, 2)

    # Read the temperature sensor data
    temp_level = ReadChannel(temp_channel)
    temp_volts = ConvertVolts(temp_level, 2)
    celsius       = ConvertTemp(temp_volts, 2)

    # Read the microphone data
    mic_level = ReadChannel(mic_channel)
    mic_volts = ConvertVolts(mic_level, 2)

    #Convert LDR Voltage to lux
    lux = float((250/light_volts) - 50)
    dB = float(20 * math.log10(mic_volts/0.005))

    cnt += 1

    #Adding values to database
    valuestoDB(cnt, lux, celsius, dB)


    # Print out results
    print("--------------------------------------------")
    print("Light: {} ({}V)".format(light_level, light_volts))
    print("Temperature : {} ({}V) {} deg C".format(temp_level, temp_volts, celsius))
    print("Noise level: {} ({}V)".format(mic_level, mic_volts))
    print(dB)
    #Actuator code below
    if (lux < 400):
       if (dB > 30):
            BuzzerActivation()
            if (celsius > 21):
                MotorActivation()



    # Wait before repeating loop
    time.sleep(delay)

